// 0. Style reset
:style reset

---

//01. Soft reset
MATCH (n) DETACH DELETE n;

---

// 02. Constraints
// Movie (using tconst as unique ID)
CREATE CONSTRAINT movie_id IF NOT EXISTS 
FOR (m:Movie) 
REQUIRE m.tconst IS UNIQUE;

// Person (shared constraint for all roles, keyed by TMDB ID)
CREATE CONSTRAINT person_id IF NOT EXISTS 
FOR (p:Person) 
REQUIRE p.tmdb_id IS UNIQUE;

// Genre
CREATE CONSTRAINT genre_name IF NOT EXISTS 
FOR (g:Genre) 
REQUIRE g.name IS UNIQUE;

// Subgenre
CREATE CONSTRAINT subgenre_name IF NOT EXISTS 
FOR (sg:Subgenre) 
REQUIRE sg.name IS UNIQUE;

// Production Company
CREATE CONSTRAINT company_name IF NOT EXISTS 
FOR (c:ProductionCompany) 
REQUIRE c.name IS UNIQUE;

---

//03. import movies
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE row.from_label = "Movie" AND row.from_tconst IS NOT NULL
MERGE (m:Movie {tconst: row.from_tconst})
SET 
    m.primaryTitle = CASE 
        WHEN row.from_title IS NOT NULL AND row.from_title <> "" 
        THEN row.from_title ELSE "Unknown Title" END,
    m.releaseYear = CASE 
        WHEN row.from_year IS NOT NULL AND row.from_year <> "" 
        THEN toInteger(toFloat(row.from_year)) ELSE NULL END,
    m.runtimeMinutes = CASE 
        WHEN row.from_runtimeMinutes IS NOT NULL AND row.from_runtimeMinutes <> "" 
        THEN toInteger(row.from_runtimeMinutes) ELSE NULL END,
    m.imdbRating = CASE 
        WHEN row.from_averageRating IS NOT NULL AND row.from_averageRating <> "" 
        THEN toFloat(row.from_averageRating) ELSE NULL END,
    m.revenue = CASE 
        WHEN row.from_revenue IS NOT NULL AND row.from_revenue <> "" 
        THEN toFloat(row.from_revenue) ELSE NULL END,
    m.budget = CASE 
        WHEN row.from_budget IS NOT NULL AND row.from_budget <> "" 
        THEN toFloat(row.from_budget) ELSE NULL END,
    m.numVotes = CASE 
        WHEN row.from_numVotes IS NOT NULL AND row.from_numVotes <> "" 
        THEN toInteger(row.from_numVotes) ELSE NULL END,
    m.budgetCategory = CASE 
        WHEN row.from_budget_category IS NOT NULL AND row.from_budget_category <> "" 
        THEN row.from_budget_category ELSE NULL END,
    m.profit = CASE 
        WHEN row.profit IS NOT NULL AND row.profit <> "" 
        THEN toFloat(row.profit) ELSE NULL END,
    m.profitPercentGain = CASE 
        WHEN row.profit_percent_gain IS NOT NULL AND row.profit_percent_gain <> "" 
        THEN toFloat(row.profit_percent_gain) ELSE NULL END;


---

// 04. Import Actors
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "Actor"
  AND row.to_id IS NOT NULL AND trim(row.to_id) <> ""
MERGE (a:Person {tmdb_id: trim(row.to_id)})
SET 
  a.name = trim(row.to_name),
  a.gender = CASE 
               WHEN row.to_gender IS NOT NULL AND trim(row.to_gender) <> "" 
               THEN toInteger(row.to_gender) 
               ELSE NULL 
             END,
  a.popularity = CASE 
                   WHEN row.to_popularity IS NOT NULL AND trim(row.to_popularity) <> "" 
                   THEN toFloat(row.to_popularity) 
                   ELSE NULL 
                 END,
  a.adult = CASE 
              WHEN row.to_adult IS NOT NULL AND trim(row.to_adult) <> "" 
              THEN toBoolean(row.to_adult) 
              ELSE NULL 
END
SET a:Actor;

---

//05. Link Actors to Movies
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE row.relationship = "ACTED_IN"
  AND row.to_id IS NOT NULL AND row.to_id <> ""
  AND row.from_tconst IS NOT NULL AND row.from_tconst <> ""
MATCH (a:Person {tmdb_id: row.to_id})
MATCH (m:Movie {tconst: row.from_tconst})
MERGE (a)-[:ACTED_IN]->(m);

---

// 06. Import Directors
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "Director"
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
MERGE (d:Director {name: trim(row.to_name)});

---

// 07. Link Directors to Movies
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.relationship) = "DIRECTED"
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
  AND row.from_tconst IS NOT NULL AND trim(row.from_tconst) <> ""
MATCH (d:Director {name: trim(row.to_name)})
MATCH (m:Movie {tconst: trim(row.from_tconst)})
MERGE (d)-[:DIRECTED]->(m);

---

// 08. Import DoPs
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "Director of Photography"
  AND row.to_id IS NOT NULL AND trim(row.to_id) <> ""
MERGE (p:Person {tmdb_id: trim(row.to_id)})
SET 
  p.name = trim(row.to_name),
  p.gender = CASE 
               WHEN row.to_gender IS NOT NULL AND trim(row.to_gender) <> "" 
               THEN toInteger(row.to_gender) 
               ELSE NULL 
             END,
  p.popularity = CASE 
                   WHEN row.to_popularity IS NOT NULL AND trim(row.to_popularity) <> "" 
                   THEN toFloat(row.to_popularity) 
                   ELSE NULL 
                 END
SET p:`Director of Photography`;

---

// 09. Link DoPs to Movies
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.relationship) = "PHOTOGRAPHED"
  AND row.to_id IS NOT NULL AND trim(row.to_id) <> ""
  AND row.from_tconst IS NOT NULL AND trim(row.from_tconst) <> ""
MATCH (p:Person {tmdb_id: trim(row.to_id)})
MATCH (m:Movie {tconst: trim(row.from_tconst)})
MERGE (p)-[:PHOTOGRAPHED]->(m);
---

// 10. Import Genres
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "Genre"
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
MERGE (g:Genre {name: trim(row.to_name)});
---

// 11. Link Movies to Genres
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.relationship) = "IN_GENRE"
  AND row.from_tconst IS NOT NULL AND trim(row.from_tconst) <> ""
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
MATCH (m:Movie {tconst: trim(row.from_tconst)})
MATCH (g:Genre {name: trim(row.to_name)})
MERGE (m)-[:IN_GENRE]->(g);

---

// 12. Import Subgenres
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "Subgenre"
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
MERGE (sg:Subgenre {name: trim(row.to_name)});

---

// 13. Link Movies to Subgenres
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.relationship) = "HAS_SUBGENRE"
  AND row.from_tconst IS NOT NULL AND trim(row.from_tconst) <> ""
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
MATCH (m:Movie {tconst: trim(row.from_tconst)})
MATCH (sg:Subgenre {name: trim(row.to_name)})
MERGE (m)-[:HAS_SUBGENRE]->(sg);

---

// 14. Import Producers
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "Producer"
  AND row.to_id IS NOT NULL AND trim(row.to_id) <> ""
MERGE (p:Person {tmdb_id: trim(row.to_id)})
SET 
  p.name = trim(row.to_name),
  p.gender = CASE 
               WHEN row.to_gender IS NOT NULL AND trim(row.to_gender) <> "" 
               THEN toInteger(row.to_gender) 
               ELSE NULL 
             END,
  p.popularity = CASE 
                   WHEN row.to_popularity IS NOT NULL AND trim(row.to_popularity) <> "" 
                   THEN toFloat(row.to_popularity) 
                   ELSE NULL 
                 END
SET p:Producer;

---

// 15. Link Producers to Movies
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.relationship) = "PRODUCED"
  AND row.to_id IS NOT NULL AND trim(row.to_id) <> ""
  AND row.from_tconst IS NOT NULL AND trim(row.from_tconst) <> ""
MATCH (p:Producer {tmdb_id: trim(row.to_id)})
MATCH (m:Movie {tconst: trim(row.from_tconst)})
MERGE (p)-[:PRODUCED]->(m);

---

// 16. Import Production Companies
LOAD CSV WITH HEADERS FROM "file:///graph_data.csv" AS row
WITH row
WHERE trim(row.to_label) = "ProductionCompany"
  AND row.to_name IS NOT NULL AND trim(row.to_name) <> ""
MERGE (pc:ProductionCompany {name: trim(row.to_name)});

---

// Graph: Brad Pitt
MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)
WHERE toLower(a.name) = "brad pitt"
RETURN a, m;

---

// Graph: Quentin Tarantino
MATCH (d:Director)-[:DIRECTED]->(m:Movie)
WHERE toLower(d.name) = "quentin tarantino"
OPTIONAL MATCH (m)--(related)
RETURN d, m, related;

---

// Get all edge labels
CALL db.relationshipTypes()
YIELD relationshipType
RETURN relationshipType;

